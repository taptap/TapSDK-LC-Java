apply plugin: 'com.android.library'

android {
    useLibrary 'org.apache.http.legacy'

    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 1
        versionName "5.0.0-SNAPSHOT"
        archivesBaseName = "storage-android"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

    tasks.withType(Javadoc) {
        failOnError false
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
        options.addStringOption('charSet', 'UTF-8')
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

android.libraryVariants.all { variant ->
    def javadoc = task("generate${variant.name}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        def compileTask = variant.hasProperty('javaCompileProvider')? variant.javaCompileProvider.get() : variant.javaCompile
        source = compileTask.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        doFirst { classpath = files(compileTask.classpath.files) + files(ext.androidJar) }
        options.links("http://docs.oracle.com/javase/8/docs/api/");
        options.links("http://d.android.com/reference/");
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
    def name = variant.buildType.name
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    def compileTask = variant.hasProperty('javaCompileProvider')? variant.javaCompileProvider.get() : variant.javaCompile
    task.dependsOn compileTask
    task.dependsOn javadoc
    task.from compileTask.destinationDir
    task.exclude '**/BuildConfig.class'
    task.exclude '**/R.class'
    task.exclude '**/R$*.class'
    artifacts.add('archives', task);
}

dependencies {
//    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "io.reactivex.rxjava2:rxandroid:${rootProject.ext.rxandroidVersion}"

    implementation("cn.leancloud:storage-core:${rootProject.ext.sdkVersion}")
    testImplementation 'junit:junit:4.12'
    testImplementation "org.mockito:mockito-core:2.+"
//    api 'com.squareup.okhttp3:okhttp:3.12.1'


    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
}

apply from: '../maven_push.gradle'
